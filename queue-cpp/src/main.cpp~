#include "queue.h"
#include <iostream>


using std::cout;
using std::endl;

static inline void check(bool flag, const char *file, int line) {
  if (!flag) {
    throw std::string("ERROR: failed on ") + file + " " + std::to_string(line);
  }
}

#define CHECK(x) check(x, __FILE__, __LINE__)

class Tests {
public:
  static void test1();
  static void test2();
  static void test3();
  static void test4();
};

void Tests::test1() {
  cout << "Test1: queue create and destroy\n";
  {
    Queue<int> q(5);
    CHECK(q.is_empty());
    CHECK(q.size() == 0);
    CHECK(q.peek() == q._sentinel);
  }
  {
    Queue<int> q(5);
    for (int i = 0; i < 5; i++) {
      CHECK(q.enqueue(i));
      CHECK(q.size() == (size_t)i + 1);
    }
    CHECK(!q.enqueue(6));
    CHECK(q.size() == 5);

    for (int i = 5; i <= 10; i++) {
      CHECK(q.peek() == i - 5);
      CHECK(q.dequeue());
      CHECK(q.enqueue(i));
      CHECK(q.size() == 5);
    }

    for (int i = 0; i < 5; i++) {
      CHECK(q.dequeue());
    }
    CHECK(!q.dequeue());
    CHECK(q.is_empty());
    CHECK(q.size() == 0);
    CHECK(q.peek() == q.get_sentinel());
  }
}

void Tests::test2() {
  cout << "Test2: queue to_string\n";
  {
    Queue<int> q(5);
    CHECK(q.enqueue(0));
    CHECK(q.enqueue(1));
    CHECK(q.enqueue(2));
    CHECK(q.enqueue(3));
    CHECK(q.enqueue(4));
    CHECK(q.dequeue());
    CHECK(q.enqueue(5));
    CHECK(q.dequeue());
    CHECK(q.enqueue(6));
    std::string expected = "# Queue - size = 5\ndata : 2 3 4 5 6\n";
    CHECK(q.to_string() == expected);
    expected = "# Queue - size = 5\ndata : 2 3 ...\n";
    CHECK(q.to_string(2) == expected);
  }
}
void Tests::test3() {
  cout << "Test3: resize\n";
  {
    Queue<int> q(5);
    CHECK(q.enqueue(0));
    CHECK(q.enqueue(1));
    CHECK(q.enqueue(2));
    CHECK(q.enqueue(3));
    CHECK(q.enqueue(4));
    q.resize(10);
    std::string expected = "# Queue - size = 5\ndata : 0 1 2 3 4\n";
    CHECK(q.to_string() == expected);

    q.resize(3);
    expected = "# Queue - size = 3\ndata : 0 1 2\n";
    CHECK(q.to_string() == expected);
  }


  {
    Queue<int> q(5);
    CHECK(q.enqueue(0));
    CHECK(q.enqueue(1));
    CHECK(q.enqueue(2));
    CHECK(q.enqueue(3));
    CHECK(q.enqueue(4));
    CHECK(q.dequeue());
    CHECK(q.dequeue());
    CHECK(q.enqueue(5));
    CHECK(q.enqueue(6));
    CHECK(!q.enqueue(7));
    
    q.resize(10);
    std::string expected = "# Queue - size = 5\ndata : 2 3 4 5 6\n";
    CHECK(q.to_string() == expected);

    q.resize(3);
    expected = "# Queue - size = 3\ndata : 2 3 4\n";
    CHECK(q.to_string() == expected);

    q.resize(0);
    expected = "# Queue - size = 0\ndata :\n";
    CHECK(q.to_string() == expected);
  }
}
  
void Tests::test4() {
  cout << "Test4: popalot\n";
  {
    Queue<int> q(5);
    CHECK(q.enqueue(0));
    CHECK(q.enqueue(1));
    CHECK(q.enqueue(2));
    CHECK(q.enqueue(3));
    CHECK(q.enqueue(4));
    CHECK(q.dequeue());
    CHECK(q.dequeue());
    CHECK(q.enqueue(5));
    CHECK(q.enqueue(6));
    CHECK(!q.enqueue(7));

    popalot(q);
    CHECK(q.size() == 0);
    CHECK(q.is_empty());
  }
}

int main()
{
  try {
    Tests::test1();
    Tests::test2();
    Tests::test3();
    Tests::test4();
  } catch (const std::string &ex) {
    cout << ex << "\n";
    exit(1);
  }
  return 0;
}
